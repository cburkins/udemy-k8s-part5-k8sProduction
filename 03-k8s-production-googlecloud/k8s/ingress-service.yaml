apiVersion: extensions/v1beta1
kind: Ingress
metadata:
    name: ingress-service

    # k8s ingress documentation: https://kubernetes.io/docs/concepts/services-networking/ingress/
    # nginx-ingress annotation docs: https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/annotations/
    # cert-manager annotation docs: https://cert-manager.io/docs/usage/ingress/
    annotations:
        # nginx ingress pkg will discover all ingress with this annotation
        kubernetes.io/ingress.class: nginx

        # removes the "/api", rewrites as "/"
        nginx.ingress.kubernetes.io/rewrite-target: /$1

        # For https, informs ingress to use https certificate from resource named "letsencrypt-prod" (defined by issuer.yaml)
        # ingress-shim (cert-manager) looks for Ingress resources with this annotation, then ensures that Certificate resource exists
        # ingres-shim will store in name provided by spec.tls.secretName
        # this also tells ingress-shim which issuer resource to talk with to get certificate
        cert-manager.io/cluster-issuer: "letsencrypt-prod"

        # If user attempt http://domainname.org, will redirect to https://domainname.org
        # By default, ingress controller redirects to https if TLS is enabled for that ingress.
        # Seems that client uses HTTP Strict Transport Security (HSTS) to always redirect anyway
        # TODO: When set to false, seems that using IP address in browser gets you insecure connection
        nginx.ingress.kubernetes.io/ssl-redirect: "true"

# I think "spec" is defined by k8s ingress, rather than nginx-ingress addon
# documentation: https://kubernetes.io/docs/concepts/services-networking/ingress/
spec:
    # entire "tls" section added for https config
    # Placing a host in tls config will signal that a certificate should be created
    tls:
        # This secret must contain keys named tls.crt (certificate) and tls.key (private key) to use for TLS
        # You can inspect via "kubectl describe secrets/secret-name"
        # Referencing this secret here tells Ingress controller to secure comms from client to Load Balancer using TLS
        # You must make sure this TLS secret came form a certificate that contains a Common Name (CN), also known as FQDN
        - secretName: udemy-k8s-01 # will be in "default" namespace
    # tls:
    #     - hosts:
    #           - chadburkins.org
    #           - www.chadburkins.org
    #           # cert-manager will store created certificate in this secret, matches certificate.yaml:spec:secretName
    #       secretName: udemy-k8s-01
    # Original rules before https config
    rules:
        - http:
              paths:
                  - path: /?(.*)
                    backend:
                        serviceName: client-cluster-ip-service
                        servicePort: 3000
                  - path: /api/?(.*)
                    backend:
                        serviceName: server-cluster-ip-service
                        servicePort: 5000
    # For https config, Instructor said we need to define both domain.org and www.domain.org
    # rules:
    #     - host: chadburkins.org # optional, if present in header, this rule will only apply to matching hosts
    #       http:
    #           paths:
    #               - path: /?(.*)
    #                 backend:
    #                     serviceName: client-cluster-ip-service
    #                     servicePort: 3000
    #               - path: /api/?(.*)
    #                 backend:
    #                     serviceName: server-cluster-ip-service
    #                     servicePort: 5000
    #     - host: www.chadburkins.org
    #       http:
    #           paths:
    #               - path: /?(.*)
    #                 backend:
    #                     serviceName: client-cluster-ip-service
    #                     servicePort: 3000
    #               - path: /api/?(.*)
    #                 backend:
    #                     serviceName: server-cluster-ip-service
    #                     servicePort: 5000
